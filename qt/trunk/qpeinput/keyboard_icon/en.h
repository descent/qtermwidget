/* Generated by qembed */
#ifndef _2062185732
#define _2062185732
#include <qimage.h>
#include <stdlib.h>
static const QRgb en_data[] = {
    0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,
    0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,
    0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,
    0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9a99b1,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,
    0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xff9e9db6,0xffa2a5b8,
    0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,
    0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa2a5b8,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,
    0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,
    0xffa3a5bc,0xffa3a5bc,0xffa3a5bc,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,
    0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8abb8,0xffa8a9bf,0xffa8a9bf,
    0xffa8a9bf,0xffa8a9bf,0xffa8a9bf,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,
    0xff0000ff,0xff0000ff,0xffa8a9bf,0xffa8a9bf,0xffa8a9bf,0xffa8a9bf,0xffa8a9bf,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xff0000ff,0xffb1b7bb,
    0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,0xff0000ff,0xffb1b7bb,0xffb1b7bb,0xffb1b7bb,
    0xffb1b7bb,0xffb1b7bb,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xff0000ff,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xff0000ff,
    0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xff0000ff,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb3b6c5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,
    0xffb8bcc5,0xffb8bcc5,0xff0000ff,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xff0000ff,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,
    0xff0000ff,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffb8bcc5,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,0xff0000ff,0xffbbbdcd,0xffbbbdcd,
    0xffbbbdcd,0xffbbbdcd,0xff0000ff,0xffbbbdcd,0xff0000ff,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,0xff0000ff,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,0xffbbbdcd,
    0xffbbbdcd,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xff0000ff,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xff0000ff,0xffc6c6c7,0xff0000ff,
    0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xff0000ff,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc6c6c7,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,
    0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,
    0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,
    0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,
    0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,
    0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,
    0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,
    0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,
    0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xff0000ff,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffc4cbd1,0xffd2d1d5,
    0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xff0000ff,0xffd2d1d5,0xffd2d1d5,0xff0000ff,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xff0000ff,
    0xffd2d1d5,0xffd2d1d5,0xff0000ff,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xffd2d1d5,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xff0000ff,
    0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xff0000ff,0xffd7d7d7,0xffd7d7d7,
    0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffdbdbdc,0xffdbdbdc,0xffdbdbdc,0xffdbdbdc,0xffdbdbdc,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,
    0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xffdbdbdc,0xffdbdbdc,0xffdbdbdc,0xffdbdbdc,0xffdbdbdc,0xffdfdfe1,0xffdfdfe1,
    0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,
    0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffdfdfe1,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,
    0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,0xffe1e0e3,
    0xffe1e0e3,0xffe1e0e3,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,
    0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe3e2e4,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,
    0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,
    0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe6e4e6,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,
    0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,0xffe9e8e8,
    0xffe9e8e8,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,
    0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffecebec,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,
    0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,
    0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3,0xffe4efe3
};

static struct EmbedImage {
    int width, height, depth;
    const unsigned char *data;
    int numColors;
    const QRgb *colorTable;
    bool alpha;
    const char *name;
} embed_image_vec[] = {
    { 23, 27, 32, (const unsigned char*)en_data, 0, 0, FALSE, "en" },
};

static int cmpEmbedImage(const void *a, const void *b)
{
    const EmbedImage* ea = (const EmbedImage*)a;
    const EmbedImage* eb = (const EmbedImage*)b;
    return strcmp(ea->name,eb->name);
}
inline const QImage& qembed_findImage(const char* name)
{
    EmbedImage key; key.name = name;
    EmbedImage* r = (EmbedImage*)bsearch( &key, embed_image_vec,
        sizeof(embed_image_vec)/sizeof(EmbedImage), sizeof(EmbedImage), cmpEmbedImage );
    QImage* img;
    if ( r ) {
        img = new QImage((uchar*)r->data,
                            r->width,
                            r->height,
                            r->depth,
#ifdef _WS_QWS_
                            (r->width*r->depth+31)/32*4,
#endif
                            (QRgb*)r->colorTable,
                            r->numColors,
                            QImage::BigEndian
                    );
        if ( r->alpha )
            img->setAlphaBuffer(TRUE);
    } else {
        static QImage dummy;
        img = &dummy;
    }
    return *img;
}

#endif
