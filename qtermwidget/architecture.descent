trace code flow

for paint the terminal.

int K3Process::childOutput(int fdno)
        emit receivedStdout(this, buffer, len);

  connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
          this, SLOT(dataReceived(K3Process *,char *, int)));

void Pty::dataReceived(K3Process *,char *buf, int len)
{
  emit receivedData(buf,len);
}

   connect( _shellProcess,SIGNAL(receivedData(const char*,int)),this,
            SLOT(onReceiveBlock(const char*,int)) );

void Session::onReceiveBlock( const char* buf, int len )
{ 
    _emulation->receiveData( buf, len );
    emit receivedData( QString::fromLatin1( buf, len ) );
}

void Emulation::receiveData(const char* text, int length)
{
        emit stateSet(NOTIFYACTIVITY);

        bufferedUpdate();

    QString unicodeText = _decoder->toUnicode(text,length);
  
        //send characters to terminal emulator
        for (int i=0;i<unicodeText.length();i++)
        {
                receiveChar(unicodeText[i].unicode());
        }

        //look for z-modem indicator
        //-- someone who understands more about z-modems that I do may be able to move
        //this check into the above for loop?
        for (int i=0;i<length;i++)
        {
                if (text[i] == '\030')
                {
                        if ((length-i-1 > 3) && (strncmp(text+i+1, "B00", 3) == 0))
                                emit zmodemDetected();
                }
        }
}



  QObject::connect(&_bulkTimer1, SIGNAL(timeout()), this, SLOT(showBulk()) );
  QObject::connect(&_bulkTimer2, SIGNAL(timeout()), this, SLOT(showBulk()) );

void Emulation::showBulk()
{
    _bulkTimer1.stop();
    _bulkTimer2.stop();

    emit outputChanged();

    _currentScreen->resetScrolledLines();
    _currentScreen->resetDroppedLines();
}

ScreenWindow* Emulation::createWindow()
{
    connect(this , SIGNAL(outputChanged()), window , SLOT(notifyOutputChanged()) );
}

void ScreenWindow::notifyOutputChanged()
{
    emit outputChanged();
}



void TerminalDisplay::setScreenWindow(ScreenWindow* window)
{
    // disconnect existing screen window if any
    if ( _screenWindow )
    {
        disconnect( _screenWindow , 0 , this , 0 );
    }

    _screenWindow = window;

    if ( window )
    {
//#warning "The order here is not specified - does it matter whether updateImage or updateLineProperties comes first?"
        connect( _screenWindow , SIGNAL(outputChanged()) , this , SLOT(updateLineProperties()) );
        connect( _screenWindow , SIGNAL(outputChanged()) , this , SLOT(updateImage()) );
        window->setWindowLines(_lines);
    }
}

void TerminalDisplay::updateImage()
{
  update(dirtyRegion);
}

so repaint
